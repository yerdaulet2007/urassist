import os
from flask import Flask, request, jsonify, render_template
import openai
from flask_cors import CORS
from dotenv import load_dotenv
import traceback  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º templates –∏ static
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
TEMPLATES_PATH = os.path.join(BASE_DIR, '..', 'templates')
STATIC_PATH = os.path.join(BASE_DIR, '..', 'static')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–µ–π –∫ —à–∞–±–ª–æ–Ω–∞–º –∏ —Å—Ç–∞—Ç–∏–∫–µ
app = Flask(__name__, template_folder=TEMPLATES_PATH, static_folder=STATIC_PATH)
CORS(app)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI API
openai.api_key = os.getenv("OPENAI_API_KEY")

# –†–æ—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route("/", methods=["GET"])
def home():
    return render_template("index.html")

@app.route("/about")
def about():
    return render_template("about.html")

@app.route("/calculator")
def calculator():
    return render_template("calculator.html")

@app.route("/ai")
def ai():
    return render_template("ai.html")

@app.route("/articles")
def articles():
    return render_template("articles.html")

# –†–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç AI —Ñ–æ—Ä–º—ã
@app.route("/ask", methods=["POST"])
def ask():
    print("üõ† POST /ask –±—ã–ª –≤—ã–∑–≤–∞–Ω")
    try:
        data = request.get_json()
        print("üì© –ü–æ–ª—É—á–µ–Ω JSON:", data)

        user_message = data.get("message", "")
        print("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user_message)

        if not user_message:
            return jsonify({"error": "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"}), 400

        # –ù–æ–≤—ã–π –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º v1/chat/completions
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",  # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω."},
                {"role": "user", "content": user_message}
            ]
        )

        reply = response['choices'][0]['message']['content'].strip()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI:", reply)
        return jsonify({"reply": reply})

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)
